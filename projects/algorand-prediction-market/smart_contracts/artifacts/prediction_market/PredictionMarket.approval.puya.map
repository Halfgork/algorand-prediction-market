{
  "version": 3,
  "sources": [
    "../../prediction_market/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQQ;AAAsB;AAAtB;AACA;AAAoB;;AAApB;AACA;AAAkB;AAAlB;AACA;;AAAe;;AAAf;AARR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;AAAA;;AA2IK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AArHL;;;AAAA;;;AAqHK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA5CA;;AAAA;AAAA;AAAA;;AAAA;AAzEL;;;AAyEK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AA/DL;;;AA+DK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAvDL;;;AAAA;;;AAuDK;;;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AAnCL;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmCK;;;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;AAVL;;;AAAA;;;AAAA;;;AAAA;;;AAUK;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVL;;AAAA;;;;;;;;;AAUA;;;AAUe;;AAAA;AAAA;AAAA;;AAAkB;;AAAlB;AAAP;AACyB;;AAAA;AAAA;AAAlB;AAAP;AAGS;AAAA;;AAAA;;AAAA;AAAjB;;;AACmB;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAW;;;;;;;;;;AAAX;AAAP;AADK;AAAA;AAAA;;;;;AAIT;AAAA;AAAA;AAAA;AAAuB;AAAvB;AAAA;AAAA;AAAA;AACoB;;AAAA;;;AAApB;AAAA;AAAA;AACA;AAAkB;AAAlB;AACA;;AAAe;;AAAf;AAEmB;AAAA;AAAA;AAAA;AAAZ;AAAP;;AAAA;AAER;;;AASe;;AAAA;AAAoB;AAAA;AAAA;AAAA;AAApB;AAAP;AACO;;AAAA;AAAsB;AAAtB;AAAP;AAGO;;AAAA;;AAAwB;;AAAxB;AAAP;AACO;;AAAA;;AAAA;AAAsB;;;;AAAtB;AAAP;AACO;;AAAA;;AAAsB;;AAAtB;AAAP;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAER;;;AAIe;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;AACO;;AAAA;AAAoB;AAAA;AAAA;AAAA;AAApB;AAAP;AACO;;AAAA;AAAwB;AAAxB;AAAP;;AAER;;;AAGe;;AAAA;AAAoB;AAAA;AAAA;AAAA;AAApB;AAAP;AAGS;AAAA;AAAA;AAAA;AAAkB;;AAAlB;AAAgC;;AAAhC;AAEF;AAAP;AAER;;;AAYe;;AAAA;AAAoB;AAAA;AAAA;AAAA;AAApB;AAAP;AAsBgB;AAAA;AAAA;AAAA;AAAZ;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAIY;AAAA;AAAA;AAAA;AAAZ;AACY;;AAA0B;;;;AAA1B;AAAZ;AANG;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOH;;AAPG;AAQH;;AARG;AAAA;AAAA;AAlBG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBH;AAZA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA;AANQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMR;AAAP;AAWR;;;AAOe;;AAAA;AAAoB;AAAA;AAAA;AAAA;AAApB;AAAP;AASO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AASmB;AAAA;AAAA;AAAA;AAAZ;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.prediction_market.contract.PredictionMarket.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8 3"
    },
    "7": {
      "op": "bytecblock \"market_counter\" \"total_pool\" 0x151f7c75 \"market_title\" \"creator\" 0x0000000000000000"
    },
    "70": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "72": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "75": {
      "op": "bytec_0 // \"market_counter\"",
      "defined_out": [
        "\"market_counter\""
      ],
      "stack_out": [
        "\"market_counter\""
      ]
    },
    "76": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"market_counter\"",
        "0"
      ],
      "stack_out": [
        "\"market_counter\"",
        "0"
      ]
    },
    "77": {
      "op": "app_global_put",
      "stack_out": []
    },
    "78": {
      "op": "bytec_3 // \"market_title\"",
      "defined_out": [
        "\"market_title\""
      ],
      "stack_out": [
        "\"market_title\""
      ]
    },
    "79": {
      "op": "pushbytes \"\"",
      "defined_out": [
        "\"\"",
        "\"market_title\""
      ],
      "stack_out": [
        "\"market_title\"",
        "\"\""
      ]
    },
    "81": {
      "op": "app_global_put",
      "stack_out": []
    },
    "82": {
      "op": "bytec_1 // \"total_pool\"",
      "defined_out": [
        "\"total_pool\""
      ],
      "stack_out": [
        "\"total_pool\""
      ]
    },
    "83": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_pool\"",
        "0"
      ]
    },
    "84": {
      "op": "app_global_put",
      "stack_out": []
    },
    "85": {
      "op": "bytec 4 // \"creator\"",
      "defined_out": [
        "\"creator\""
      ],
      "stack_out": [
        "\"creator\""
      ]
    },
    "87": {
      "op": "txn Sender",
      "defined_out": [
        "\"creator\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"creator\"",
        "materialized_values%0#0"
      ]
    },
    "89": {
      "op": "app_global_put",
      "stack_out": []
    },
    "90": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "92": {
      "op": "bz main_bare_routing@12",
      "stack_out": []
    },
    "95": {
      "op": "pushbytess 0xcb3b9c04 0x9c1dbe67 0xd2ab8a70 0xe35cc11c 0xd7a2d755 0x40314e7c 0x7250a940 // method \"create_market(string,string[],uint64[],uint64)uint64\", method \"place_bet(uint64,uint64,pay)void\", method \"settle_market(uint64,uint64)void\", method \"claim_winnings(uint64)uint64\", method \"get_market_info(uint64)(string,string[],uint64[],uint64[],uint64,uint64,uint64,uint64)\", method \"get_user_position(uint64,address)(uint64[],uint64,bool)\", method \"get_market_count()uint64\"",
      "defined_out": [
        "Method(claim_winnings(uint64)uint64)",
        "Method(create_market(string,string[],uint64[],uint64)uint64)",
        "Method(get_market_count()uint64)",
        "Method(get_market_info(uint64)(string,string[],uint64[],uint64[],uint64,uint64,uint64,uint64))",
        "Method(get_user_position(uint64,address)(uint64[],uint64,bool))",
        "Method(place_bet(uint64,uint64,pay)void)",
        "Method(settle_market(uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(create_market(string,string[],uint64[],uint64)uint64)",
        "Method(place_bet(uint64,uint64,pay)void)",
        "Method(settle_market(uint64,uint64)void)",
        "Method(claim_winnings(uint64)uint64)",
        "Method(get_market_info(uint64)(string,string[],uint64[],uint64[],uint64,uint64,uint64,uint64))",
        "Method(get_user_position(uint64,address)(uint64[],uint64,bool))",
        "Method(get_market_count()uint64)"
      ]
    },
    "132": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(claim_winnings(uint64)uint64)",
        "Method(create_market(string,string[],uint64[],uint64)uint64)",
        "Method(get_market_count()uint64)",
        "Method(get_market_info(uint64)(string,string[],uint64[],uint64[],uint64,uint64,uint64,uint64))",
        "Method(get_user_position(uint64,address)(uint64[],uint64,bool))",
        "Method(place_bet(uint64,uint64,pay)void)",
        "Method(settle_market(uint64,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create_market(string,string[],uint64[],uint64)uint64)",
        "Method(place_bet(uint64,uint64,pay)void)",
        "Method(settle_market(uint64,uint64)void)",
        "Method(claim_winnings(uint64)uint64)",
        "Method(get_market_info(uint64)(string,string[],uint64[],uint64[],uint64,uint64,uint64,uint64))",
        "Method(get_user_position(uint64,address)(uint64[],uint64,bool))",
        "Method(get_market_count()uint64)",
        "tmp%2#0"
      ]
    },
    "135": {
      "op": "match main_create_market_route@5 main_place_bet_route@6 main_settle_market_route@7 main_claim_winnings_route@8 main_get_market_info_route@9 main_get_user_position_route@10 main_get_market_count_route@11",
      "stack_out": []
    },
    "151": {
      "block": "main_after_if_else@14",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "152": {
      "op": "return",
      "stack_out": []
    },
    "153": {
      "block": "main_get_market_count_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "155": {
      "op": "!",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "156": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "157": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "159": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "160": {
      "callsub": "smart_contracts.prediction_market.contract.PredictionMarket.get_market_count",
      "op": "callsub get_market_count",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "163": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "0x151f7c75"
      ]
    },
    "164": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%43#0"
      ]
    },
    "165": {
      "op": "concat",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "166": {
      "op": "log",
      "stack_out": []
    },
    "167": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "168": {
      "op": "return",
      "stack_out": []
    },
    "169": {
      "block": "main_get_user_position_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "171": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "172": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "173": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "175": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "176": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "179": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[8]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "182": {
      "callsub": "smart_contracts.prediction_market.contract.PredictionMarket.get_user_position",
      "op": "callsub get_user_position",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "185": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "0x151f7c75"
      ]
    },
    "186": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%37#0"
      ]
    },
    "187": {
      "op": "concat",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "188": {
      "op": "log",
      "stack_out": []
    },
    "189": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "190": {
      "op": "return",
      "stack_out": []
    },
    "191": {
      "block": "main_get_market_info_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "193": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "194": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "195": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "197": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "198": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "201": {
      "callsub": "smart_contracts.prediction_market.contract.PredictionMarket.get_market_info",
      "op": "callsub get_market_info",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "204": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "0x151f7c75"
      ]
    },
    "205": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%31#0"
      ]
    },
    "206": {
      "op": "concat",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "207": {
      "op": "log",
      "stack_out": []
    },
    "208": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "209": {
      "op": "return",
      "stack_out": []
    },
    "210": {
      "block": "main_claim_winnings_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "212": {
      "op": "!",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "213": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "214": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "216": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "217": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "220": {
      "callsub": "smart_contracts.prediction_market.contract.PredictionMarket.claim_winnings",
      "op": "callsub claim_winnings",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "223": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "0x151f7c75"
      ]
    },
    "224": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%25#0"
      ]
    },
    "225": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "226": {
      "op": "log",
      "stack_out": []
    },
    "227": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "228": {
      "op": "return",
      "stack_out": []
    },
    "229": {
      "block": "main_settle_market_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "231": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "232": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "233": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "235": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "236": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "239": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "242": {
      "callsub": "smart_contracts.prediction_market.contract.PredictionMarket.settle_market",
      "op": "callsub settle_market",
      "stack_out": []
    },
    "245": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "246": {
      "op": "return",
      "stack_out": []
    },
    "247": {
      "block": "main_place_bet_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "249": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "250": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "251": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "253": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "254": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "257": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "260": {
      "op": "txn GroupIndex",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%16#0"
      ]
    },
    "262": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%16#0",
        "1"
      ]
    },
    "263": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "gtxn_idx%0#0"
      ]
    },
    "264": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "265": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "267": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "268": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "269": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[8]%2#0",
        "gtxn_idx%0#0"
      ]
    },
    "270": {
      "callsub": "smart_contracts.prediction_market.contract.PredictionMarket.place_bet",
      "op": "callsub place_bet",
      "stack_out": []
    },
    "273": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "274": {
      "op": "return",
      "stack_out": []
    },
    "275": {
      "block": "main_create_market_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "277": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "278": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "279": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "281": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "282": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "285": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "288": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "291": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "294": {
      "callsub": "smart_contracts.prediction_market.contract.PredictionMarket.create_market",
      "op": "callsub create_market",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "297": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0x151f7c75"
      ]
    },
    "298": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%10#0"
      ]
    },
    "299": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "300": {
      "op": "log",
      "stack_out": []
    },
    "301": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "302": {
      "op": "return",
      "stack_out": []
    },
    "303": {
      "block": "main_bare_routing@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "305": {
      "op": "bnz main_after_if_else@14",
      "stack_out": []
    },
    "308": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "310": {
      "op": "!",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "311": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "312": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "313": {
      "op": "return",
      "stack_out": []
    },
    "314": {
      "subroutine": "smart_contracts.prediction_market.contract.PredictionMarket.create_market",
      "params": {
        "title#0": "bytes",
        "options#0": "bytes",
        "odds#0": "bytes",
        "duration_hours#0": "bytes"
      },
      "block": "create_market",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "317": {
      "op": "frame_dig -3",
      "defined_out": [
        "options#0 (copy)"
      ],
      "stack_out": [
        "options#0 (copy)"
      ]
    },
    "319": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "options#0 (copy)"
      ],
      "stack_out": [
        "options#0 (copy)",
        "0"
      ]
    },
    "320": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "321": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "323": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "2"
      ]
    },
    "325": {
      "op": ">=",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "326": {
      "error": "Market must have at least 2 options",
      "op": "assert // Market must have at least 2 options",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "327": {
      "op": "frame_dig -2",
      "defined_out": [
        "odds#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "odds#0 (copy)"
      ]
    },
    "329": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "odds#0 (copy)",
        "0"
      ]
    },
    "330": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "331": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%4#0"
      ]
    },
    "332": {
      "error": "Options and odds must have same length",
      "op": "assert // Options and odds must have same length",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "333": {
      "op": "intc_0 // 0",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0"
      ]
    },
    "334": {
      "block": "create_market_for_header@1",
      "stack_in": [
        "tmp%0#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0"
      ]
    },
    "336": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "338": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "continue_looping%0#0"
      ]
    },
    "339": {
      "op": "bz create_market_after_for@4",
      "stack_out": [
        "tmp%0#0",
        "i#0"
      ]
    },
    "342": {
      "op": "frame_dig -2",
      "defined_out": [
        "i#0",
        "odds#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "odds#0 (copy)"
      ]
    },
    "344": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "array_head_and_tail%0#0"
      ]
    },
    "347": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "array_head_and_tail%0#0",
        "i#0"
      ]
    },
    "349": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%0#0",
        "i#0",
        "i#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "array_head_and_tail%0#0",
        "i#0 (copy)",
        "i#0 (copy)"
      ]
    },
    "350": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "array_head_and_tail%0#0",
        "i#0 (copy)"
      ]
    },
    "352": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "array_head_and_tail%0#0",
        "i#0",
        "i#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "array_head_and_tail%0#0",
        "i#0 (copy)",
        "8"
      ]
    },
    "353": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "i#0",
        "item_offset%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "354": {
      "op": "intc_2 // 8",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "8"
      ]
    },
    "355": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "i#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "356": {
      "op": "pushbytes 0x0000000000000065",
      "defined_out": [
        "0x0000000000000065",
        "i#0",
        "reinterpret_biguint%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "reinterpret_biguint%0#0",
        "0x0000000000000065"
      ]
    },
    "366": {
      "op": "b>=",
      "defined_out": [
        "i#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "tmp%6#0"
      ]
    },
    "367": {
      "error": "Odds must be at least 1.01 (101)",
      "op": "assert // Odds must be at least 1.01 (101)",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0"
      ]
    },
    "368": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "369": {
      "op": "+",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "i#0"
      ]
    },
    "370": {
      "op": "frame_bury 1",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0"
      ]
    },
    "372": {
      "op": "b create_market_for_header@1"
    },
    "375": {
      "block": "create_market_after_for@4",
      "stack_in": [
        "tmp%0#0",
        "i#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "0"
      ]
    },
    "376": {
      "op": "bytec_0 // \"market_counter\"",
      "defined_out": [
        "\"market_counter\"",
        "0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "0",
        "\"market_counter\""
      ]
    },
    "377": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "378": {
      "error": "check self.market_counter exists",
      "op": "assert // check self.market_counter exists",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "maybe_value%0#0"
      ]
    },
    "379": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "maybe_value%0#0",
        "1"
      ]
    },
    "380": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "materialized_values%0#0"
      ]
    },
    "381": {
      "op": "bytec_0 // \"market_counter\"",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "materialized_values%0#0",
        "\"market_counter\""
      ]
    },
    "382": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "\"market_counter\"",
        "materialized_values%0#0"
      ]
    },
    "383": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "i#0"
      ]
    },
    "384": {
      "op": "frame_dig -4",
      "defined_out": [
        "title#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "title#0 (copy)"
      ]
    },
    "386": {
      "op": "extract 2 0",
      "defined_out": [
        "materialized_values%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "materialized_values%1#0"
      ]
    },
    "389": {
      "op": "bytec_3 // \"market_title\"",
      "defined_out": [
        "\"market_title\"",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "materialized_values%1#0",
        "\"market_title\""
      ]
    },
    "390": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "\"market_title\"",
        "materialized_values%1#0"
      ]
    },
    "391": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "i#0"
      ]
    },
    "392": {
      "op": "bytec_1 // \"total_pool\"",
      "defined_out": [
        "\"total_pool\""
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "\"total_pool\""
      ]
    },
    "393": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "\"total_pool\"",
        "0"
      ]
    },
    "394": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "i#0"
      ]
    },
    "395": {
      "op": "bytec 4 // \"creator\"",
      "defined_out": [
        "\"creator\""
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "\"creator\""
      ]
    },
    "397": {
      "op": "txn Sender",
      "defined_out": [
        "\"creator\"",
        "materialized_values%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "\"creator\"",
        "materialized_values%2#0"
      ]
    },
    "399": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%0#0",
        "i#0"
      ]
    },
    "400": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "0"
      ]
    },
    "401": {
      "op": "bytec_0 // \"market_counter\"",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "0",
        "\"market_counter\""
      ]
    },
    "402": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "403": {
      "error": "check self.market_counter exists",
      "op": "assert // check self.market_counter exists",
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "maybe_value%1#0"
      ]
    },
    "404": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "i#0",
        "val_as_bytes%0#0"
      ]
    },
    "405": {
      "op": "frame_bury 0"
    },
    "407": {
      "retsub": true,
      "op": "retsub"
    },
    "408": {
      "subroutine": "smart_contracts.prediction_market.contract.PredictionMarket.place_bet",
      "params": {
        "market_id#0": "bytes",
        "option_index#0": "bytes",
        "payment_txn#0": "uint64"
      },
      "block": "place_bet",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "411": {
      "op": "frame_dig -3",
      "defined_out": [
        "market_id#0 (copy)"
      ],
      "stack_out": [
        "market_id#0 (copy)"
      ]
    },
    "413": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "414": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "415": {
      "op": "bytec_0 // \"market_counter\"",
      "defined_out": [
        "\"market_counter\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"market_counter\""
      ]
    },
    "416": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "417": {
      "error": "check self.market_counter exists",
      "op": "assert // check self.market_counter exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "418": {
      "op": "<=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "419": {
      "error": "Market does not exist",
      "op": "assert // Market does not exist",
      "stack_out": []
    },
    "420": {
      "op": "frame_dig -2",
      "defined_out": [
        "option_index#0 (copy)"
      ],
      "stack_out": [
        "option_index#0 (copy)"
      ]
    },
    "422": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "423": {
      "op": "intc_3 // 3",
      "defined_out": [
        "3",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "3"
      ]
    },
    "424": {
      "op": "<",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "425": {
      "error": "Invalid option index",
      "op": "assert // Invalid option index",
      "stack_out": []
    },
    "426": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment_txn#0 (copy)"
      ],
      "stack_out": [
        "payment_txn#0 (copy)"
      ]
    },
    "428": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "430": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "432": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "433": {
      "error": "Payment must be to application",
      "op": "assert // Payment must be to application",
      "stack_out": []
    },
    "434": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment_txn#0 (copy)"
      ]
    },
    "436": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "438": {
      "op": "dup",
      "defined_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "439": {
      "op": "pushint 1000000 // 1000000",
      "defined_out": [
        "1000000",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "1000000"
      ]
    },
    "443": {
      "op": ">=",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "444": {
      "error": "Minimum bet is 1 ALGO",
      "op": "assert // Minimum bet is 1 ALGO",
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "445": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%7#0",
        "payment_txn#0 (copy)"
      ]
    },
    "447": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "449": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%10#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "451": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%11#0"
      ]
    },
    "452": {
      "error": "Payment sender must match transaction sender",
      "op": "assert // Payment sender must match transaction sender",
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "453": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%7#0",
        "0"
      ]
    },
    "454": {
      "op": "bytec_1 // \"total_pool\"",
      "defined_out": [
        "\"total_pool\"",
        "0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0",
        "\"total_pool\""
      ]
    },
    "455": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "456": {
      "error": "check self.total_pool exists",
      "op": "assert // check self.total_pool exists",
      "stack_out": [
        "tmp%7#0",
        "maybe_value%1#0"
      ]
    },
    "457": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "458": {
      "op": "bytec_1 // \"total_pool\"",
      "stack_out": [
        "materialized_values%0#0",
        "\"total_pool\""
      ]
    },
    "459": {
      "op": "swap",
      "stack_out": [
        "\"total_pool\"",
        "materialized_values%0#0"
      ]
    },
    "460": {
      "op": "app_global_put",
      "stack_out": []
    },
    "461": {
      "retsub": true,
      "op": "retsub"
    },
    "462": {
      "subroutine": "smart_contracts.prediction_market.contract.PredictionMarket.settle_market",
      "params": {
        "market_id#0": "bytes",
        "winning_option#0": "bytes"
      },
      "block": "settle_market",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "465": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "467": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "468": {
      "op": "bytec 4 // \"creator\"",
      "defined_out": [
        "\"creator\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"creator\""
      ]
    },
    "470": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "471": {
      "error": "check self.creator exists",
      "op": "assert // check self.creator exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "472": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "473": {
      "error": "Only market creator can settle",
      "op": "assert // Only market creator can settle",
      "stack_out": []
    },
    "474": {
      "op": "frame_dig -2",
      "defined_out": [
        "market_id#0 (copy)"
      ],
      "stack_out": [
        "market_id#0 (copy)"
      ]
    },
    "476": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "477": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "478": {
      "op": "bytec_0 // \"market_counter\"",
      "defined_out": [
        "\"market_counter\"",
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"market_counter\""
      ]
    },
    "479": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "480": {
      "error": "check self.market_counter exists",
      "op": "assert // check self.market_counter exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "481": {
      "op": "<=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "482": {
      "error": "Market does not exist",
      "op": "assert // Market does not exist",
      "stack_out": []
    },
    "483": {
      "op": "frame_dig -1",
      "defined_out": [
        "winning_option#0 (copy)"
      ],
      "stack_out": [
        "winning_option#0 (copy)"
      ]
    },
    "485": {
      "op": "btoi",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "486": {
      "op": "intc_3 // 3",
      "defined_out": [
        "3",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "3"
      ]
    },
    "487": {
      "op": "<",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "488": {
      "error": "Invalid winning option",
      "op": "assert // Invalid winning option",
      "stack_out": []
    },
    "489": {
      "retsub": true,
      "op": "retsub"
    },
    "490": {
      "subroutine": "smart_contracts.prediction_market.contract.PredictionMarket.claim_winnings",
      "params": {
        "market_id#0": "bytes"
      },
      "block": "claim_winnings",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "493": {
      "op": "frame_dig -1",
      "defined_out": [
        "market_id#0 (copy)"
      ],
      "stack_out": [
        "market_id#0 (copy)"
      ]
    },
    "495": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "496": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "497": {
      "op": "bytec_0 // \"market_counter\"",
      "defined_out": [
        "\"market_counter\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"market_counter\""
      ]
    },
    "498": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "499": {
      "error": "check self.market_counter exists",
      "op": "assert // check self.market_counter exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "500": {
      "op": "<=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "501": {
      "error": "Market does not exist",
      "op": "assert // Market does not exist",
      "stack_out": []
    },
    "502": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "503": {
      "op": "bytec_1 // \"total_pool\"",
      "defined_out": [
        "\"total_pool\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_pool\""
      ]
    },
    "504": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "505": {
      "error": "check self.total_pool exists",
      "op": "assert // check self.total_pool exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "506": {
      "op": "pushint 90 // 90",
      "defined_out": [
        "90",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "90"
      ]
    },
    "508": {
      "op": "*",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "509": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "100"
      ]
    },
    "511": {
      "op": "/",
      "defined_out": [
        "payout#0"
      ],
      "stack_out": [
        "payout#0"
      ]
    },
    "512": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "513": {
      "retsub": true,
      "op": "retsub"
    },
    "514": {
      "subroutine": "smart_contracts.prediction_market.contract.PredictionMarket.get_market_info",
      "params": {
        "market_id#0": "bytes"
      },
      "block": "get_market_info",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "517": {
      "op": "frame_dig -1",
      "defined_out": [
        "market_id#0 (copy)"
      ],
      "stack_out": [
        "market_id#0 (copy)"
      ]
    },
    "519": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "520": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "521": {
      "op": "bytec_0 // \"market_counter\"",
      "defined_out": [
        "\"market_counter\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"market_counter\""
      ]
    },
    "522": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "523": {
      "error": "check self.market_counter exists",
      "op": "assert // check self.market_counter exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "524": {
      "op": "<=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "525": {
      "error": "Market does not exist",
      "op": "assert // Market does not exist",
      "stack_out": []
    },
    "526": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "527": {
      "op": "bytec_3 // \"market_title\"",
      "defined_out": [
        "\"market_title\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"market_title\""
      ]
    },
    "528": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "529": {
      "error": "check self.market_title exists",
      "op": "assert // check self.market_title exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "530": {
      "op": "dup",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "531": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "length%0#0"
      ]
    },
    "532": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "as_bytes%3#0"
      ]
    },
    "533": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "length_uint16%0#0"
      ]
    },
    "536": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "maybe_value%1#0"
      ]
    },
    "537": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "538": {
      "op": "intc_0 // 0",
      "stack_out": [
        "encoded_value%0#0",
        "0"
      ]
    },
    "539": {
      "op": "bytec_1 // \"total_pool\"",
      "defined_out": [
        "\"total_pool\"",
        "0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0",
        "\"total_pool\""
      ]
    },
    "540": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_value%0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "541": {
      "error": "check self.total_pool exists",
      "op": "assert // check self.total_pool exists",
      "stack_out": [
        "encoded_value%0#0",
        "maybe_value%2#0"
      ]
    },
    "542": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "543": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "encoded_value%0#0",
        "tmp%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "tmp%2#0"
      ]
    },
    "545": {
      "op": "pushint 86400 // 86400",
      "defined_out": [
        "86400",
        "encoded_value%0#0",
        "tmp%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "tmp%2#0",
        "86400"
      ]
    },
    "549": {
      "op": "+",
      "defined_out": [
        "encoded_value%0#0",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "to_encode%0#0"
      ]
    },
    "550": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "551": {
      "op": "dig 2",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "553": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "data_length%0#0"
      ]
    },
    "554": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "data_length%0#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "data_length%0#0",
        "40"
      ]
    },
    "556": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "current_tail_offset%1#0"
      ]
    },
    "557": {
      "op": "dup",
      "defined_out": [
        "current_tail_offset%1#0",
        "current_tail_offset%1#0 (copy)",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "current_tail_offset%1#0",
        "current_tail_offset%1#0 (copy)"
      ]
    },
    "558": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "current_tail_offset%1#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "current_tail_offset%1#0",
        "as_bytes%5#0"
      ]
    },
    "559": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_value%0#0",
        "offset_as_uint16%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0"
      ]
    },
    "562": {
      "op": "pushbytes 0x0028",
      "defined_out": [
        "0x0028",
        "current_tail_offset%1#0",
        "encoded_value%0#0",
        "offset_as_uint16%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0",
        "0x0028"
      ]
    },
    "566": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "current_tail_offset%1#0",
        "0x0028",
        "offset_as_uint16%1#0"
      ]
    },
    "567": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "568": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%1#0"
      ]
    },
    "569": {
      "op": "pushint 38 // 38",
      "defined_out": [
        "38",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%1#0",
        "38"
      ]
    },
    "571": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%2#0"
      ]
    },
    "572": {
      "op": "dup",
      "defined_out": [
        "current_tail_offset%2#0",
        "current_tail_offset%2#0 (copy)",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%2#0",
        "current_tail_offset%2#0 (copy)"
      ]
    },
    "573": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%2#0",
        "as_bytes%6#0"
      ]
    },
    "574": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "offset_as_uint16%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%2#0",
        "offset_as_uint16%2#0"
      ]
    },
    "577": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "current_tail_offset%2#0",
        "offset_as_uint16%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "579": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%2#0",
        "offset_as_uint16%2#0"
      ]
    },
    "580": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "581": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "current_tail_offset%2#0"
      ]
    },
    "582": {
      "op": "pushint 26 // 26",
      "defined_out": [
        "26",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "current_tail_offset%2#0",
        "26"
      ]
    },
    "584": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "current_tail_offset%3#0"
      ]
    },
    "585": {
      "op": "itob",
      "defined_out": [
        "as_bytes%7#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "as_bytes%7#0"
      ]
    },
    "586": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "offset_as_uint16%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0",
        "offset_as_uint16%3#0"
      ]
    },
    "589": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "590": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%0#0"
      ]
    },
    "592": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "593": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%1#0"
      ]
    },
    "594": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "595": {
      "op": "bytec 5 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%6#0",
        "0x0000000000000000"
      ]
    },
    "597": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "598": {
      "op": "bytec 5 // 0x0000000000000000",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%7#0",
        "0x0000000000000000"
      ]
    },
    "600": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "601": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%8#0",
        "encoded_value%0#0"
      ]
    },
    "602": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0"
      ]
    },
    "603": {
      "op": "pushbytes 0x000300060010001a00084f7074696f6e203100084f7074696f6e203200084f7074696f6e2033",
      "defined_out": [
        "0x000300060010001a00084f7074696f6e203100084f7074696f6e203200084f7074696f6e2033",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "0x000300060010001a00084f7074696f6e203100084f7074696f6e203200084f7074696f6e2033"
      ]
    },
    "643": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0"
      ]
    },
    "644": {
      "op": "pushbytes 0x000300000000000000c8000000000000012c0000000000000096",
      "defined_out": [
        "0x000300000000000000c8000000000000012c0000000000000096",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "0x000300000000000000c8000000000000012c0000000000000096"
      ]
    },
    "672": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0"
      ]
    },
    "673": {
      "op": "pushbytes 0x0003000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0003000000000000000000000000000000000000000000000000",
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "0x0003000000000000000000000000000000000000000000000000"
      ]
    },
    "701": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%12#0"
      ]
    },
    "702": {
      "retsub": true,
      "op": "retsub"
    },
    "703": {
      "subroutine": "smart_contracts.prediction_market.contract.PredictionMarket.get_user_position",
      "params": {
        "market_id#0": "bytes",
        "user#0": "bytes"
      },
      "block": "get_user_position",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "706": {
      "op": "frame_dig -2",
      "defined_out": [
        "market_id#0 (copy)"
      ],
      "stack_out": [
        "market_id#0 (copy)"
      ]
    },
    "708": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "709": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "710": {
      "op": "bytec_0 // \"market_counter\"",
      "defined_out": [
        "\"market_counter\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"market_counter\""
      ]
    },
    "711": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "712": {
      "error": "check self.market_counter exists",
      "op": "assert // check self.market_counter exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "713": {
      "op": "<=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "714": {
      "error": "Market does not exist",
      "op": "assert // Market does not exist",
      "stack_out": []
    },
    "715": {
      "op": "pushbytes 0x000b0000000000000000000003000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x000b0000000000000000000003000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "0x000b0000000000000000000003000000000000000000000000000000000000000000000000"
      ]
    },
    "754": {
      "retsub": true,
      "op": "retsub"
    },
    "755": {
      "subroutine": "smart_contracts.prediction_market.contract.PredictionMarket.get_market_count",
      "params": {},
      "block": "get_market_count",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "756": {
      "op": "bytec_0 // \"market_counter\"",
      "defined_out": [
        "\"market_counter\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"market_counter\""
      ]
    },
    "757": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "758": {
      "error": "check self.market_counter exists",
      "op": "assert // check self.market_counter exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "759": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "760": {
      "retsub": true,
      "op": "retsub"
    }
  }
}