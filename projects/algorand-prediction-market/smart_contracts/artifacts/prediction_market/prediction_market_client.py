# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "name": "title"}, {"type": "string[]", "name": "options"}, {"type": "uint64[]", "name": "odds"}, {"type": "uint64", "name": "duration_hours"}], "name": "create_market", "returns": {"type": "uint64"}, "desc": "Create a new prediction market.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "market_id"}, {"type": "uint64", "name": "option_index"}, {"type": "pay", "name": "payment_txn"}], "name": "place_bet", "returns": {"type": "void"}, "desc": "Place a bet on a market option.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "market_id"}, {"type": "uint64", "name": "winning_option"}], "name": "settle_market", "returns": {"type": "void"}, "desc": "Settle a market by determining the winning option.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "market_id"}], "name": "claim_winnings", "returns": {"type": "uint64"}, "desc": "Claim winnings from a settled market.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "market_id"}], "name": "get_market_info", "returns": {"type": "(string,string[],uint64[],uint64[],uint64,uint64,uint64,uint64)"}, "desc": "Get comprehensive market information.", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "market_id"}, {"type": "address", "name": "user"}], "name": "get_user_position", "returns": {"type": "(uint64[],uint64,bool)"}, "desc": "Get user's betting position for a market.", "events": [], "readonly": true, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "get_market_count", "returns": {"type": "uint64"}, "desc": "Get total market count.", "events": [], "readonly": true, "recommendations": {}}], "name": "PredictionMarket", "state": {"keys": {"box": {}, "global": {"market_counter": {"key": "bWFya2V0X2NvdW50ZXI=", "keyType": "AVMString", "valueType": "AVMUint64"}, "market_title": {"key": "bWFya2V0X3RpdGxl", "keyType": "AVMString", "valueType": "AVMString"}, "total_pool": {"key": "dG90YWxfcG9vbA==", "keyType": "AVMString", "valueType": "AVMUint64"}, "creator": {"key": "Y3JlYXRvcg==", "keyType": "AVMString", "valueType": "address"}}, "local": {}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 2, "ints": 2}, "local": {"bytes": 0, "ints": 0}}}, "structs": {}, "byteCode": {"approval": "CiAEAAEIAyYGDm1hcmtldF9jb3VudGVyCnRvdGFsX3Bvb2wEFR98dQxtYXJrZXRfdGl0bGUHY3JlYXRvcggAAAAAAAAAADEYQAAPKCJnK4AAZykiZycEMQBnMRtBANCCBwTLO5wEBJwdvmcE0quKcATjXMEcBNei11UEQDFOfARyUKlANhoAjgcAfABgAE4AOwAoABIAAiJDMRkURDEYRIgCUCpMULAjQzEZFEQxGEQ2GgE2GgKIAgYqTFCwI0MxGRREMRhENhoBiAE2KkxQsCNDMRkURDEYRDYaAYgBCypMULAjQzEZFEQxGEQ2GgE2GgKIANkjQzEZFEQxGEQ2GgE2GgIxFiMJSTgQIxJEiACHI0MxGRREMRhENhoBNhoCNhoDNhoEiAARKkxQsCNDMRlA/2MxGBREI0OKBAGL/SJZRwKBAg9Ei/4iWRJEIosBiwAMQQAhi/5XAgCLAUlOAiQLJFiACAAAAAAAAABlp0QjCIwBQv/XIihlRCMIKExni/xXAgArTGcpImcnBDEAZyIoZUQWjACJigMAi/0XIihlRA5Ei/4XJQxEi/84BzIKEkSL/zgISYHAhD0PRIv/OAAxABJEIillRAgpTGeJigIAMQAiJwRlRBJEi/4XIihlRA5Ei/8XJQxEiYoBAYv/FyIoZUQORCIpZUSBWguBZAoWiYoBAYv/FyIoZUQORCIrZURJFRZXBgJMUCIpZUQWMgeBgKMFCBZLAhWBKAhJFlcGAoACAChMUEyBJghJFlcGAk8CTFBMgRoIFlcGAlBPAlBMUCcFUCcFUExQgCYAAwAGABAAGgAIT3B0aW9uIDEACE9wdGlvbiAyAAhPcHRpb24gM1CAGgADAAAAAAAAAMgAAAAAAAABLAAAAAAAAACWUIAaAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQiYoCAYv+FyIoZUQORIAlAAsAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIkiKGVEFok=", "clear": "CoEBQw=="}, "desc": "A comprehensive prediction market smart contract for sports betting.", "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [355], "errorMessage": "Index access is out of bounds"}, {"pc": [425], "errorMessage": "Invalid option index"}, {"pc": [488], "errorMessage": "Invalid winning option"}, {"pc": [419, 482, 501, 525, 714], "errorMessage": "Market does not exist"}, {"pc": [326], "errorMessage": "Market must have at least 2 options"}, {"pc": [444], "errorMessage": "Minimum bet is 1 ALGO"}, {"pc": [367], "errorMessage": "Odds must be at least 1.01 (101)"}, {"pc": [156, 172, 194, 213, 232, 250, 278], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [473], "errorMessage": "Only market creator can settle"}, {"pc": [332], "errorMessage": "Options and odds must have same length"}, {"pc": [433], "errorMessage": "Payment must be to application"}, {"pc": [452], "errorMessage": "Payment sender must match transaction sender"}, {"pc": [311], "errorMessage": "can only call when creating"}, {"pc": [159, 175, 197, 216, 235, 253, 281], "errorMessage": "can only call when not creating"}, {"pc": [471], "errorMessage": "check self.creator exists"}, {"pc": [378, 403, 417, 480, 499, 523, 712, 758], "errorMessage": "check self.market_counter exists"}, {"pc": [529], "errorMessage": "check self.market_title exists"}, {"pc": [456, 505, 541], "errorMessage": "check self.total_pool exists"}, {"pc": [269], "errorMessage": "transaction type is pay"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class CreateMarketArgs:
    """Dataclass for create_market arguments"""
    title: str
    options: list[str]
    odds: list[int]
    duration_hours: int

    @property
    def abi_method_signature(self) -> str:
        return "create_market(string,string[],uint64[],uint64)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class PlaceBetArgs:
    """Dataclass for place_bet arguments"""
    market_id: int
    option_index: int
    payment_txn: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "place_bet(uint64,uint64,pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SettleMarketArgs:
    """Dataclass for settle_market arguments"""
    market_id: int
    winning_option: int

    @property
    def abi_method_signature(self) -> str:
        return "settle_market(uint64,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ClaimWinningsArgs:
    """Dataclass for claim_winnings arguments"""
    market_id: int

    @property
    def abi_method_signature(self) -> str:
        return "claim_winnings(uint64)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetMarketInfoArgs:
    """Dataclass for get_market_info arguments"""
    market_id: int

    @property
    def abi_method_signature(self) -> str:
        return "get_market_info(uint64)(string,string[],uint64[],uint64[],uint64,uint64,uint64,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetUserPositionArgs:
    """Dataclass for get_user_position arguments"""
    market_id: int
    user: str

    @property
    def abi_method_signature(self) -> str:
        return "get_user_position(uint64,address)(uint64[],uint64,bool)"


class PredictionMarketParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def create_market(
        self,
        args: tuple[str, list[str], list[int], int] | CreateMarketArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_market(string,string[],uint64[],uint64)uint64",
            "args": method_args,
        }))

    def place_bet(
        self,
        args: tuple[int, int, algokit_utils.AppMethodCallTransactionArgument] | PlaceBetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "place_bet(uint64,uint64,pay)void",
            "args": method_args,
        }))

    def settle_market(
        self,
        args: tuple[int, int] | SettleMarketArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "settle_market(uint64,uint64)void",
            "args": method_args,
        }))

    def claim_winnings(
        self,
        args: tuple[int] | ClaimWinningsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "claim_winnings(uint64)uint64",
            "args": method_args,
        }))

    def get_market_info(
        self,
        args: tuple[int] | GetMarketInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_market_info(uint64)(string,string[],uint64[],uint64[],uint64,uint64,uint64,uint64)",
            "args": method_args,
        }))

    def get_user_position(
        self,
        args: tuple[int, str] | GetUserPositionArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_user_position(uint64,address)(uint64[],uint64,bool)",
            "args": method_args,
        }))

    def get_market_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_market_count()uint64",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class PredictionMarketCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def create_market(
        self,
        args: tuple[str, list[str], list[int], int] | CreateMarketArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_market(string,string[],uint64[],uint64)uint64",
            "args": method_args,
        }))

    def place_bet(
        self,
        args: tuple[int, int, algokit_utils.AppMethodCallTransactionArgument] | PlaceBetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "place_bet(uint64,uint64,pay)void",
            "args": method_args,
        }))

    def settle_market(
        self,
        args: tuple[int, int] | SettleMarketArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "settle_market(uint64,uint64)void",
            "args": method_args,
        }))

    def claim_winnings(
        self,
        args: tuple[int] | ClaimWinningsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "claim_winnings(uint64)uint64",
            "args": method_args,
        }))

    def get_market_info(
        self,
        args: tuple[int] | GetMarketInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_market_info(uint64)(string,string[],uint64[],uint64[],uint64,uint64,uint64,uint64)",
            "args": method_args,
        }))

    def get_user_position(
        self,
        args: tuple[int, str] | GetUserPositionArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_user_position(uint64,address)(uint64[],uint64,bool)",
            "args": method_args,
        }))

    def get_market_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_market_count()uint64",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class PredictionMarketSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def create_market(
        self,
        args: tuple[str, list[str], list[int], int] | CreateMarketArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_market(string,string[],uint64[],uint64)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def place_bet(
        self,
        args: tuple[int, int, algokit_utils.AppMethodCallTransactionArgument] | PlaceBetArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "place_bet(uint64,uint64,pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def settle_market(
        self,
        args: tuple[int, int] | SettleMarketArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "settle_market(uint64,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def claim_winnings(
        self,
        args: tuple[int] | ClaimWinningsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "claim_winnings(uint64)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def get_market_info(
        self,
        args: tuple[int] | GetMarketInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[str, list[str], list[int], list[int], int, int, int, int]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_market_info(uint64)(string,string[],uint64[],uint64[],uint64,uint64,uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[str, list[str], list[int], list[int], int, int, int, int]], parsed_response)

    def get_user_position(
        self,
        args: tuple[int, str] | GetUserPositionArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[list[int], int, bool]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_user_position(uint64,address)(uint64[],uint64,bool)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[list[int], int, bool]], parsed_response)

    def get_market_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_market_count()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    market_counter: int
    market_title: str
    total_pool: int
    creator: str

class PredictionMarketState:
    """Methods to access state for the current PredictionMarket app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def market_counter(self) -> int:
        """Get the current value of the market_counter key in global_state state"""
        value = self.app_client.state.global_state.get_value("market_counter")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def market_title(self) -> str:
        """Get the current value of the market_title key in global_state state"""
        value = self.app_client.state.global_state.get_value("market_title")
        if isinstance(value, dict) and "AVMString" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMString"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def total_pool(self) -> int:
        """Get the current value of the total_pool key in global_state state"""
        value = self.app_client.state.global_state.get_value("total_pool")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def creator(self) -> str:
        """Get the current value of the creator key in global_state state"""
        value = self.app_client.state.global_state.get_value("creator")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

class PredictionMarketClient:
    """Client for interacting with PredictionMarket smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = PredictionMarketParams(self.app_client)
        self.create_transaction = PredictionMarketCreateTransactionParams(self.app_client)
        self.send = PredictionMarketSend(self.app_client)
        self.state = PredictionMarketState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "PredictionMarketClient":
        return PredictionMarketClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "PredictionMarketClient":
        return PredictionMarketClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "PredictionMarketClient":
        return PredictionMarketClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "PredictionMarketComposer":
        return PredictionMarketComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create_market(string,string[],uint64[],uint64)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["place_bet(uint64,uint64,pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["settle_market(uint64,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["claim_winnings(uint64)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_market_info(uint64)(string,string[],uint64[],uint64[],uint64,uint64,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[str, list[str], list[int], list[int], int, int, int, int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_user_position(uint64,address)(uint64[],uint64,bool)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[list[int], int, bool] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_market_count()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | int | tuple[list[int], int, bool] | tuple[str, list[str], list[int], list[int], int, int, int, int]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class PredictionMarketBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating PredictionMarket contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class PredictionMarketFactory(algokit_utils.TypedAppFactoryProtocol[PredictionMarketBareCallCreateParams, None, None]):
    """Factory for deploying and managing PredictionMarketClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = PredictionMarketFactoryParams(self.app_factory)
        self.create_transaction = PredictionMarketFactoryCreateTransaction(self.app_factory)
        self.send = PredictionMarketFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: PredictionMarketBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[PredictionMarketClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return PredictionMarketClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> PredictionMarketClient:
        """Get an app client by creator address and name"""
        return PredictionMarketClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> PredictionMarketClient:
        """Get an app client by app ID"""
        return PredictionMarketClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class PredictionMarketFactoryParams:
    """Parameters for creating transactions for PredictionMarket contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = PredictionMarketFactoryCreateParams(app_factory)
        self.update = PredictionMarketFactoryUpdateParams(app_factory)
        self.delete = PredictionMarketFactoryDeleteParams(app_factory)

class PredictionMarketFactoryCreateParams:
    """Parameters for 'create' operations of PredictionMarket contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def create_market(
        self,
        args: tuple[str, list[str], list[int], int] | CreateMarketArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create_market(string,string[],uint64[],uint64)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create_market(string,string[],uint64[],uint64)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def place_bet(
        self,
        args: tuple[int, int, algokit_utils.AppMethodCallTransactionArgument] | PlaceBetArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the place_bet(uint64,uint64,pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "place_bet(uint64,uint64,pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def settle_market(
        self,
        args: tuple[int, int] | SettleMarketArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the settle_market(uint64,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "settle_market(uint64,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def claim_winnings(
        self,
        args: tuple[int] | ClaimWinningsArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the claim_winnings(uint64)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "claim_winnings(uint64)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_market_info(
        self,
        args: tuple[int] | GetMarketInfoArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_market_info(uint64)(string,string[],uint64[],uint64[],uint64,uint64,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_market_info(uint64)(string,string[],uint64[],uint64[],uint64,uint64,uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_user_position(
        self,
        args: tuple[int, str] | GetUserPositionArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_user_position(uint64,address)(uint64[],uint64,bool) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_user_position(uint64,address)(uint64[],uint64,bool)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_market_count(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_market_count()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_market_count()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

class PredictionMarketFactoryUpdateParams:
    """Parameters for 'update' operations of PredictionMarket contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class PredictionMarketFactoryDeleteParams:
    """Parameters for 'delete' operations of PredictionMarket contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class PredictionMarketFactoryCreateTransaction:
    """Create transactions for PredictionMarket contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = PredictionMarketFactoryCreateTransactionCreate(app_factory)


class PredictionMarketFactoryCreateTransactionCreate:
    """Create new instances of PredictionMarket contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class PredictionMarketFactorySend:
    """Send calls to PredictionMarket contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = PredictionMarketFactorySendCreate(app_factory)


class PredictionMarketFactorySendCreate:
    """Send create calls to PredictionMarket contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[PredictionMarketClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return PredictionMarketClient(result[0]), result[1]


class PredictionMarketComposer:
    """Composer for creating transaction groups for PredictionMarket contract calls"""

    def __init__(self, client: "PredictionMarketClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def create_market(
        self,
        args: tuple[str, list[str], list[int], int] | CreateMarketArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PredictionMarketComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_market(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create_market(string,string[],uint64[],uint64)uint64", v
            )
        )
        return self

    def place_bet(
        self,
        args: tuple[int, int, algokit_utils.AppMethodCallTransactionArgument] | PlaceBetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PredictionMarketComposer":
        self._composer.add_app_call_method_call(
            self.client.params.place_bet(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "place_bet(uint64,uint64,pay)void", v
            )
        )
        return self

    def settle_market(
        self,
        args: tuple[int, int] | SettleMarketArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PredictionMarketComposer":
        self._composer.add_app_call_method_call(
            self.client.params.settle_market(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "settle_market(uint64,uint64)void", v
            )
        )
        return self

    def claim_winnings(
        self,
        args: tuple[int] | ClaimWinningsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PredictionMarketComposer":
        self._composer.add_app_call_method_call(
            self.client.params.claim_winnings(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "claim_winnings(uint64)uint64", v
            )
        )
        return self

    def get_market_info(
        self,
        args: tuple[int] | GetMarketInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PredictionMarketComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_market_info(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_market_info(uint64)(string,string[],uint64[],uint64[],uint64,uint64,uint64,uint64)", v
            )
        )
        return self

    def get_user_position(
        self,
        args: tuple[int, str] | GetUserPositionArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PredictionMarketComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_user_position(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_user_position(uint64,address)(uint64[],uint64,bool)", v
            )
        )
        return self

    def get_market_count(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PredictionMarketComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_market_count(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_market_count()uint64", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "PredictionMarketComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "PredictionMarketComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
