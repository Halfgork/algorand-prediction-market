{
    "name": "PredictionMarket",
    "structs": {},
    "methods": [
        {
            "name": "create_market",
            "args": [
                {
                    "type": "string",
                    "name": "title"
                },
                {
                    "type": "string[]",
                    "name": "options"
                },
                {
                    "type": "uint64[]",
                    "name": "odds"
                },
                {
                    "type": "uint64",
                    "name": "duration_hours"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create a new prediction market.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "place_bet",
            "args": [
                {
                    "type": "uint64",
                    "name": "market_id"
                },
                {
                    "type": "uint64",
                    "name": "option_index"
                },
                {
                    "type": "pay",
                    "name": "payment_txn"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Place a bet on a market option.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "settle_market",
            "args": [
                {
                    "type": "uint64",
                    "name": "market_id"
                },
                {
                    "type": "uint64",
                    "name": "winning_option"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Settle a market by determining the winning option.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claim_winnings",
            "args": [
                {
                    "type": "uint64",
                    "name": "market_id"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Claim winnings from a settled market.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_market_info",
            "args": [
                {
                    "type": "uint64",
                    "name": "market_id"
                }
            ],
            "returns": {
                "type": "(string,string[],uint64[],uint64[],uint64,uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get comprehensive market information.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_user_position",
            "args": [
                {
                    "type": "uint64",
                    "name": "market_id"
                },
                {
                    "type": "address",
                    "name": "user"
                }
            ],
            "returns": {
                "type": "(uint64[],uint64,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get user's betting position for a market.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_market_count",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get total market count.",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "A comprehensive prediction market smart contract for sports betting.",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 2,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "market_counter": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWFya2V0X2NvdW50ZXI="
                },
                "market_title": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "bWFya2V0X3RpdGxl"
                },
                "total_pool": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfcG9vbA=="
                },
                "creator": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "Y3JlYXRvcg=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        355
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        425
                    ],
                    "errorMessage": "Invalid option index"
                },
                {
                    "pc": [
                        488
                    ],
                    "errorMessage": "Invalid winning option"
                },
                {
                    "pc": [
                        419,
                        482,
                        501,
                        525,
                        714
                    ],
                    "errorMessage": "Market does not exist"
                },
                {
                    "pc": [
                        326
                    ],
                    "errorMessage": "Market must have at least 2 options"
                },
                {
                    "pc": [
                        444
                    ],
                    "errorMessage": "Minimum bet is 1 ALGO"
                },
                {
                    "pc": [
                        367
                    ],
                    "errorMessage": "Odds must be at least 1.01 (101)"
                },
                {
                    "pc": [
                        156,
                        172,
                        194,
                        213,
                        232,
                        250,
                        278
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        473
                    ],
                    "errorMessage": "Only market creator can settle"
                },
                {
                    "pc": [
                        332
                    ],
                    "errorMessage": "Options and odds must have same length"
                },
                {
                    "pc": [
                        433
                    ],
                    "errorMessage": "Payment must be to application"
                },
                {
                    "pc": [
                        452
                    ],
                    "errorMessage": "Payment sender must match transaction sender"
                },
                {
                    "pc": [
                        311
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        159,
                        175,
                        197,
                        216,
                        235,
                        253,
                        281
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        471
                    ],
                    "errorMessage": "check self.creator exists"
                },
                {
                    "pc": [
                        378,
                        403,
                        417,
                        480,
                        499,
                        523,
                        712,
                        758
                    ],
                    "errorMessage": "check self.market_counter exists"
                },
                {
                    "pc": [
                        529
                    ],
                    "errorMessage": "check self.market_title exists"
                },
                {
                    "pc": [
                        456,
                        505,
                        541
                    ],
                    "errorMessage": "check self.total_pool exists"
                },
                {
                    "pc": [
                        269
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAEIAyYGDm1hcmtldF9jb3VudGVyCnRvdGFsX3Bvb2wEFR98dQxtYXJrZXRfdGl0bGUHY3JlYXRvcggAAAAAAAAAADEYQAAPKCJnK4AAZykiZycEMQBnMRtBANCCBwTLO5wEBJwdvmcE0quKcATjXMEcBNei11UEQDFOfARyUKlANhoAjgcAfABgAE4AOwAoABIAAiJDMRkURDEYRIgCUCpMULAjQzEZFEQxGEQ2GgE2GgKIAgYqTFCwI0MxGRREMRhENhoBiAE2KkxQsCNDMRkURDEYRDYaAYgBCypMULAjQzEZFEQxGEQ2GgE2GgKIANkjQzEZFEQxGEQ2GgE2GgIxFiMJSTgQIxJEiACHI0MxGRREMRhENhoBNhoCNhoDNhoEiAARKkxQsCNDMRlA/2MxGBREI0OKBAGL/SJZRwKBAg9Ei/4iWRJEIosBiwAMQQAhi/5XAgCLAUlOAiQLJFiACAAAAAAAAABlp0QjCIwBQv/XIihlRCMIKExni/xXAgArTGcpImcnBDEAZyIoZUQWjACJigMAi/0XIihlRA5Ei/4XJQxEi/84BzIKEkSL/zgISYHAhD0PRIv/OAAxABJEIillRAgpTGeJigIAMQAiJwRlRBJEi/4XIihlRA5Ei/8XJQxEiYoBAYv/FyIoZUQORCIpZUSBWguBZAoWiYoBAYv/FyIoZUQORCIrZURJFRZXBgJMUCIpZUQWMgeBgKMFCBZLAhWBKAhJFlcGAoACAChMUEyBJghJFlcGAk8CTFBMgRoIFlcGAlBPAlBMUCcFUCcFUExQgCYAAwAGABAAGgAIT3B0aW9uIDEACE9wdGlvbiAyAAhPcHRpb24gM1CAGgADAAAAAAAAAMgAAAAAAAABLAAAAAAAAACWUIAaAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQiYoCAYv+FyIoZUQORIAlAAsAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIkiKGVEFok=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}